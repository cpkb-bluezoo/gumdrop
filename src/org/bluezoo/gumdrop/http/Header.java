/*
 * HPACKHeaders.java
 * Copyright (C) 2025 Chris Burdess
 *
 * This file is part of gumdrop, a multipurpose Java server.
 * For more information please visit https://www.nongnu.org/gumdrop/
 *
 * gumdrop is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * gumdrop is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with gumdrop.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package org.bluezoo.gumdrop.http;

import java.util.regex.Pattern;

/**
 * An HTTP header. This is a name-value pair. Both the name and value are
 * treated as opaque sequences of octets. The name is case-insensitive.
 *
 * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
 */
public class Header {

    private static final Pattern NAME_PATTERN = Pattern.compile("^:?[a-zA-Z0-9\\-_]+$");
    private static final Pattern VALUE_PATTERN = Pattern.compile("^[\\x20-\\x7E\\x80-\\xFF\\t]*$");

    /**
     * Name of the header.
     * This must have only US-ASCII characters.
     * It is case-insensitive.
     */
    private final String name;

    /**
     * Value of the header.
     * This contains the data encoded for transmission, typically as
     * URL-encoded or BASE64 depending on the type of header, and will thus
     * be US-ASCII (or more precisely the TEXT production in HTTP/1.1).
     */
    private final String value;

    private int hashCode = -1;

    /**
     * Constructor.
     * @param name the name of the header
     * @param value the value of the header
     */
    public Header(String name, String value) {
        if (name == null) {
            throw new NullPointerException("name is null");
        }
        if (!NAME_PATTERN.matcher(name).matches()) {
            throw new IllegalArgumentException(String.format("Invalid HTTP header name: '%s'", name));
        }
        // Note that values can be null, although such headers are only used
        // internally and not transferred over the network.
        // We have to be lenient here and accept any obs-text generated by
        // old clients.
        if (value != null && !VALUE_PATTERN.matcher(value).matches()) {
            throw new IllegalArgumentException(String.format("Invalid HTTP header value: '%s'", value));
        }
        this.name = name;
        this.value = value;
    }

    public String getName() {
        return name;
    }

    public String getValue() {
        return value;
    }

    public int hashCode() {
        if (hashCode == -1) {
            StringBuilder buf = new StringBuilder(name.toLowerCase());
            buf.append(": ");
            if (value != null) {
                buf.append(value);
            }
            hashCode = buf.hashCode();
        }
        return hashCode;
    }

    public boolean equals(Object other) {
        if (other instanceof Header) {
            Header header = (Header) other;
            return header.name.toLowerCase().equals(name.toLowerCase()) &&
                header.value != null && value != null && header.value.equals(value);
        }
        return false;
    }

    public String toString() {
        StringBuilder buf = new StringBuilder(name);
        buf.append(": ");
        if (value != null) {
            buf.append(value);
        }
        return buf.toString();
    }

}
